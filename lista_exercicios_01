Okay, aqui est√° o conte√∫do do arquivo PDF convertido para Markdown, traduzido para o portugu√™s, enriquecido e formatado conforme suas especifica√ß√µes.

---

# Matrizes em Java ‚òï

Este material aborda o conceito de matrizes em Java, desde sua defini√ß√£o e declara√ß√£o at√© a manipula√ß√£o de seus elementos, com foco pr√°tico para desenvolvedores.

## ‚úÖ Checklist

* Revis√£o do conceito de matriz
* Declara√ß√£o e instancia√ß√£o
* Acesso aos elementos / como percorrer uma matriz
* Propriedade `length`

## üß± O que s√£o Matrizes?

Em programa√ß√£o, "matriz" √© o nome dado a arranjos bidimensionais. Uma forma intuitiva de pensar em matrizes √© como um "vetor de vetores". Imagine uma tabela: ela possui linhas e colunas, e cada c√©lula pode conter um dado.

Uma matriz, como um arranjo (array), √© uma estrutura de dados com as seguintes caracter√≠sticas:

* **Homog√™nea**: Todos os dados armazenados na matriz devem ser do mesmo tipo (por exemplo, todos `int`, todos `double`, etc.).
* **Ordenada**: Os elementos s√£o acessados por meio de suas posi√ß√µes (√≠ndices), geralmente um √≠ndice para a linha e outro para a coluna.
* **Alocada de uma vez s√≥**: A mem√≥ria para a matriz √© alocada em um bloco cont√≠nuo quando ela √© criada.

**Exemplo Visual de uma Matriz:**

A tabela a seguir representa uma matriz de n√∫meros com 3 linhas e 4 colunas:

|       | 0   | 1    | 2    | 3    |
| :---- | :-- | :--- | :--- | :--- |
| **0** | 3.5 | 17.0 | 12.3 | 8.2  |
| **1** | 4.1 | 6.2  | 7.5  | 2.9  |
| **2** | 11.0| 9.5  | 14.8 | 21.7 |

### Vantagens das Matrizes:

* **Acesso imediato aos elementos**: √â muito r√°pido acessar um elemento se voc√™ souber sua posi√ß√£o (√≠ndices), pois a localiza√ß√£o na mem√≥ria pode ser calculada diretamente.

### Desvantagens das Matrizes:

* **Tamanho fixo**: Uma vez que uma matriz √© criada, seu tamanho (n√∫mero de linhas e colunas) geralmente n√£o pode ser alterado. Se voc√™ precisar de mais ou menos espa√ßo, precisar√° criar uma nova matriz e copiar os dados.
* **Dificuldade para inser√ß√µes e dele√ß√µes**: Adicionar ou remover elementos no meio de uma matriz pode ser ineficiente, pois pode exigir o deslocamento de muitos outros elementos.

### Declara√ß√£o e Instancia√ß√£o em Java

Para usar uma matriz em Java, voc√™ primeiro precisa declar√°-la e depois instanci√°-la (alocar mem√≥ria para ela).

```java
// Declara√ß√£o de uma matriz de inteiros
int[][] minhaMatriz;

// Instancia√ß√£o: alocando mem√≥ria para uma matriz com 3 linhas e 4 colunas
minhaMatriz = new int[3][4];

// Declara√ß√£o e instancia√ß√£o em uma √∫nica linha
double[][] matrizNotas = new double[5][2]; // 5 alunos, 2 notas cada

// Voc√™ tamb√©m pode inicializar uma matriz com valores diretamente
String[][] nomes = {
    {"Jo√£o", "Silva"},
    {"Maria", "Souza"},
    {"Carlos", "Pereira"}
};
```

### Acesso aos Elementos

Os elementos de uma matriz s√£o acessados usando dois √≠ndices: o primeiro para a linha e o segundo para a coluna. Lembre-se que os √≠ndices em Java come√ßam em 0.

```java
int[][] matrizExemplo = new int[2][3]; // 2 linhas, 3 colunas

// Atribuindo valores
matrizExemplo[0][0] = 10; // Linha 0, Coluna 0
matrizExemplo[0][1] = 20; // Linha 0, Coluna 1
matrizExemplo[0][2] = 30; // Linha 0, Coluna 2
matrizExemplo[1][0] = 40; // Linha 1, Coluna 0
matrizExemplo[1][1] = 50; // Linha 1, Coluna 1
matrizExemplo[1][2] = 60; // Linha 1, Coluna 2

// Acessando e imprimindo um valor
System.out.println(matrizExemplo[1][1]); // Sa√≠da: 50
```

### Como Percorrer uma Matriz

Para percorrer (iterar sobre) todos os elementos de uma matriz, geralmente usamos la√ßos `for` aninhados. O la√ßo externo percorre as linhas e o la√ßo interno percorre as colunas de cada linha.

```java
char[][] tabuleiro = {
    {'X', 'O', 'X'},
    {'O', 'X', 'O'},
    {'X', 'O', 'O'}
};

// Percorrendo e imprimindo todos os elementos
for (int i = 0; i < 3; i++) { // i representa a linha
    for (int j = 0; j < 3; j++) { // j representa a coluna
        System.out.print(tabuleiro[i][j] + " ");
    }
    System.out.println(); // Pula para a pr√≥xima linha ap√≥s imprimir uma linha da matriz
}
// Sa√≠da:
// X O X
// O X O
// X O O
```

### Propriedade `length`

A propriedade `length` √© muito √∫til ao trabalhar com matrizes.

* `matriz.length`: Retorna o n√∫mero de **linhas** da matriz.
* `matriz[i].length`: Retorna o n√∫mero de **colunas** na linha `i` da matriz. Para matrizes retangulares (onde todas as linhas t√™m o mesmo n√∫mero de colunas), `matriz[0].length` √© suficiente para obter o n√∫mero de colunas.

```java
int[][] dados = new int[4][5]; // 4 linhas, 5 colunas

System.out.println("N√∫mero de linhas: " + dados.length); // Sa√≠da: 4
System.out.println("N√∫mero de colunas (da primeira linha): " + dados[0].length); // Sa√≠da: 5

// Usando length em la√ßos para percorrer a matriz:
for (int i = 0; i < dados.length; i++) {
    for (int j = 0; j < dados[i].length; j++) {
        // Processa dados[i][j]
        dados[i][j] = i * j;
        System.out.print(dados[i][j] + "\t");
    }
    System.out.println();
}
```

## üíª Exerc√≠cio Resolvido

Vamos criar um programa para ler um n√∫mero inteiro N e uma matriz de ordem N (N linhas e N colunas) contendo n√∫meros inteiros. Em seguida, o programa dever√° mostrar a diagonal principal dessa matriz e a quantidade de valores negativos nela presentes.

**Exemplo:**

**Entrada (Input):**
```
3
5 -3 10
15 8 2
7 9 -4
```

**Sa√≠da (Output):**
```
Diagonal Principal:
5 8 -4
Quantidade de n√∫meros negativos = 2
```

### Solu√ß√£o em Java

```java
package aplicacao;

import java.util.Scanner;

public class ProgramaMatriz {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Digite a ordem da matriz (N): ");
        int n = sc.nextInt();

        // Declara√ß√£o e instancia√ß√£o da matriz
        int[][] matriz = new int[n][n];

        System.out.println("Digite os elementos da matriz:");
        // Leitura dos elementos da matriz
        for (int i = 0; i < n; i++) { // Percorre as linhas
            System.out.printf("Elementos da linha %d:\n", i);
            for (int j = 0; j < n; j++) { // Percorre as colunas
                matriz[i][j] = sc.nextInt();
            }
        }

        // Mostrando a diagonal principal
        System.out.println("\nDiagonal Principal:");
        for (int i = 0; i < n; i++) {
            System.out.print(matriz[i][i] + " ");
        }
        System.out.println(); // Pula linha

        // Contando os n√∫meros negativos
        int contadorNegativos = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matriz[i][j] < 0) {
                    contadorNegativos++;
                }
            }
        }
        System.out.printf("Quantidade de n√∫meros negativos = %d\n", contadorNegativos);

        sc.close();
    }
}
```

## üß† Matrizes e Mem√≥ria

√â importante entender como as matrizes s√£o organizadas na mem√≥ria do computador. Em Java:

* **Stack (Pilha)**: Armazena vari√°veis de tipos primitivos (como `int`, `double`, `char`) e refer√™ncias a objetos.
* **Heap (Monte)**: √â onde os objetos (incluindo arrays/matrizes) s√£o efetivamente criados e seus dados armazenados.

No contexto do exerc√≠cio anterior, se `n` for 3 e a matriz `mat` for preenchida com os valores do exemplo:

```
matriz = {{5, -3, 10}, {15, 8, 2}, {7, 9, -4}}
n = 3
```

* A vari√°vel `n` (um tipo primitivo `int`) √© armazenada diretamente na mem√≥ria **Stack**.
* A vari√°vel `matriz` (que √© uma refer√™ncia para um objeto array bidimensional) tamb√©m tem sua refer√™ncia armazenada na **Stack**. Essa refer√™ncia "aponta" para o local na mem√≥ria **Heap** onde os dados da matriz (os arrays que representam as linhas e, por sua vez, os elementos `5, -3, 10, ...`) est√£o efetivamente guardados.

Objetos (como arrays) em Java s√£o sempre alocados na Heap. A vari√°vel na Stack apenas guarda o endere√ßo de mem√≥ria desse objeto na Heap.

*(Baseado no diagrama da p√°gina 7 do PDF, onde 'mat' √© a refer√™ncia na Stack e os valores da matriz est√£o na Heap).*

## üöÄ Executando o Exemplo

Voc√™ pode compilar e executar o c√≥digo Java do exerc√≠cio em diversas IDEs ou via linha de comando. Abaixo, instru√ß√µes para VS Code e IntelliJ IDEA.

### Usando o VS Code:

1.  **Instale o Java Development Kit (JDK)**: Certifique-se de ter o JDK instalado em seu sistema.
2.  **Instale a Extens√£o Java no VS Code**: Abra o VS Code, v√° para a aba de Extens√µes (Ctrl+Shift+X) e procure por "Extension Pack for Java" da Microsoft. Instale-o.
3.  **Crie um Projeto (Opcional, mas recomendado)**:
    * Abra o VS Code em uma pasta vazia.
    * Pressione `Ctrl+Shift+P` para abrir a paleta de comandos, digite "Java: Create Java Project", selecione "No build tools", escolha o local e d√™ um nome ao projeto.
4.  **Crie o Arquivo**:
    * Dentro da pasta `src` do seu projeto (ou diretamente na pasta se n√£o criou um projeto formal), crie um novo arquivo chamado `ProgramaMatriz.java`.
5.  **Cole o C√≥digo**: Cole o c√≥digo Java fornecido no arquivo `ProgramaMatriz.java`. Certifique-se que o `package aplicacao;` corresponde √† estrutura de pastas (se voc√™ criou o pacote `aplicacao` dentro de `src`). Se n√£o usou pacotes, remova a linha `package aplicacao;`.
6.  **Execute**:
    * Abra o arquivo `ProgramaMatriz.java`.
    * Voc√™ ver√° um link "Run" acima do m√©todo `main`. Clique nele.
    * Alternativamente, clique com o bot√£o direito no arquivo no explorador de arquivos e selecione "Run Java".
    * A entrada de dados e a sa√≠da ser√£o mostradas no terminal integrado do VS Code.

### Usando o IntelliJ IDEA:

1.  **Instale o Java Development Kit (JDK)**: Certifique-se de ter o JDK instalado.
2.  **Crie um Novo Projeto**:
    * Abra o IntelliJ IDEA.
    * Clique em "New Project".
    * Selecione "Java" na lista √† esquerda.
    * Escolha o JDK instalado.
    * Clique em "Next" (n√£o precisa de template por enquanto).
    * D√™ um nome ao projeto (ex: `EstudoMatrizes`) e defina o local. Clique em "Finish".
3.  **Crie a Classe**:
    * No painel "Project" √† esquerda, expanda seu projeto. Clique com o bot√£o direito na pasta `src`.
    * Selecione "New" -> "Java Class".
    * No campo "Name", digite `ProgramaMatriz`. Se quiser usar um pacote (ex: `aplicacao`), digite `aplicacao.ProgramaMatriz`.
    * Clique em "OK" ou pressione Enter.
4.  **Cole o C√≥digo**: Cole o c√≥digo Java fornecido na classe criada. Ajuste a declara√ß√£o `package` no topo do arquivo para corresponder ao pacote que voc√™ criou (ou remova-a se n√£o criou um pacote).
5.  **Execute**:
    * Clique na seta verde ao lado da declara√ß√£o `public class ProgramaMatriz` ou ao lado do m√©todo `public static void main(String[] args)`.
    * Selecione "Run 'ProgramaMatriz.main()'".
    * A entrada de dados e a sa√≠da ser√£o mostradas na aba "Run" na parte inferior da IDE.

---
## üìö
